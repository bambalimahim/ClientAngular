{"version":3,"sources":["../../../src/libts/utils.ts"],"names":[],"mappings":"AAAA,iEAAiE;AACjE,qCAAqC;AAErC,6DAA6D;AAC7D,+DAA+D;AAC/D,4CAA4C;AAC5C,4EAA4E;AAC5E,kDAAkD;AAClD,oCAAoC;AACpC,KAAK;AATL,AAWA,iEAXiE;AAWjE,MAAM,CAAC,IAAI,UAAU,GAAG,SAAS,CAAC,CAAC,6BAA6B;AAEhE;;;;;GAKG;AAPgC,AAQnC,6BARgE;AAQhE,MAAM,qBAAqB,YAAiB,EAAE,KAAU;IACtD,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC;YAAC,QAAQ,CAAC;QAC/B,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,CAAC,CAAC;QACX,CAAC;IACH,CAAC;AACH,CAAC;AAAA,CAAC","file":"utils.js","sourceRoot":"","sourcesContent":["// import * as crypto from '                     crypto-js/sha1';\n// import * as buffer from \"buffer/\";\n\n// export function passwordDigest(nonce, created, password) {\n//   // digest = base64 ( sha1 ( nonce + created + password ) )\n//   var pwHash = crypto.createHash('sha1');\n//   var rawNonce = buffer.Buffer(nonce || '', 'base64').toString('binary');\n//   pwHash.update(rawNonce + created + password);\n//   return pwHash.digest('base64');\n// };\n\nexport var TNS_PREFIX = '__tns__'; // Prefix for targetNamespace\n\n/**\n * Find a key from an object based on the value\n * @param {Object} Namespace prefix/uri mapping\n * @param {*} nsURI value\n * @returns {String} The matching key\n */\nexport function findPrefix(xmlnsMapping: any, nsURI: any) {\n  for (var n in xmlnsMapping) {\n    if (n === TNS_PREFIX) continue;\n    if (xmlnsMapping[n] === nsURI) {\n      return n;\n    }\n  }\n};\n"]}